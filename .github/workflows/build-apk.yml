name: Build Android APK

# Define cuándo se ejecutará esta acción (ej: cada vez que subas cambios a la rama 'main')
on:
  push:
    branches: [ main ]
  # También permite ejecutarlo manualmente desde la pestaña Actions de GitHub
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest # Usamos un servidor Linux en la nube

    steps:
    # 1. Descarga tu código del repositorio
    - name: Checkout repository
      uses: actions/checkout@v3

    # 2. Configura Node.js (asegúrate de que la versión sea compatible)
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18' # O la versión que necesite tu proyecto

    # 3. Configura Java (necesario para Android)
    - name: Set up Java JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    # 4. Instala las dependencias del proyecto Vue
    - name: Install dependencies
      run: npm install

    # 5. Construye el proyecto Vue
    - name: Build Vue App
      run: npm run build

    # 6. Instala Capacitor CLI globalmente
    - name: Install Capacitor CLI
      run: npm install -g @capacitor/cli

    # 7. Sincroniza Capacitor con la plataforma Android
    - name: Sync Capacitor Android
      run: npx cap sync android

    # 8. Da permisos de ejecución a Gradle (importante en Linux)
    - name: Make gradlew executable
      run: chmod +x ./android/gradlew
      working-directory: ./android # Ejecuta el comando dentro de la carpeta android

    # 9. Construye el APK (modo Debug por defecto)
    - name: Build Android APK
      run: ./gradlew assembleDebug # Cambia a assembleRelease para la versión final
      working-directory: ./android

    # 10. Sube el APK generado como un artefacto
    - name: Upload APK artifact
      uses: actions/upload-artifact@v3
      with:
        name: app-debug-apk # Nombre del archivo descargable
        path: android/app/build/outputs/apk/debug/app-debug.apk # Ruta al APK generado